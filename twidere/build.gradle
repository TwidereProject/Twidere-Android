apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'imgenie'

buildscript {
    ext {
        enableGoogleVariant = project.file('google-services.json').exists()
    }
    repositories {
        maven { url "https://jitpack.io" }
        jcenter()
        if (enableGoogleVariant) {
            // START Non-FOSS component
            google()
            // END Non-FOSS component
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:${kotlinVersion}"
        classpath 'com.github.mariotaku:imgenie-plugin:0.2.5'

        if (enableGoogleVariant) {
            // START Non-FOSS component
            classpath "com.google.gms:google-services:${pluginVersions['PlayServices']}"
            // END Non-FOSS component
        }
    }
}

repositories {
    mavenLocal()
    maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
    flatDir { dirs "$projectDir/lib" }
}

android {
    compileSdkVersion globalCompileSdkVersion
    buildToolsVersion globalBuildToolsVersion
    ndkVersion '21.0.6113669'

    defaultConfig {
        applicationId "org.mariotaku.twidere"
        minSdkVersion globalMinSdkVersion
        targetSdkVersion globalTargetSdkVersion
        versionCode projectVersionCode
        versionName projectVersionName
        multiDexEnabled true

        buildConfigField 'boolean', 'LEAK_CANARY_ENABLED', 'Boolean.parseBoolean("false")'
        buildConfigField 'boolean', 'SHOW_CUSTOM_TOKEN_DIALOG', 'Boolean.parseBoolean("false")'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions 'channel'
    productFlavors {
        if (enableGoogleVariant) {
            // START Non-FOSS component
            google {
                dimension 'channel'
            }
            // END Non-FOSS component
        }
        fdroid {
            dimension 'channel'
        }
    }

    def file = rootProject.file('private/signing.properties')
    def hasSigningProps = file.exists()

    signingConfigs {
        if (hasSigningProps) {
            twidere {
                Properties signingProp = new Properties()
                signingProp.load(file.newInputStream())
                storeFile = rootProject.file(signingProp.get('storeFile'))
                storePassword = (String) signingProp.get('storePassword')
                keyAlias = (String) signingProp.get('keyAlias')
                keyPassword = (String) signingProp.get('keyPassword')
            }
        }
    }

    buildTypes {
        debug {
            if (hasSigningProps) {
                signingConfig signingConfigs.twidere
            }

            multiDexEnabled true
            minifyEnabled false
            shrinkResources false
            resValue("bool", "debug", "true")
        }
        release {
            if (hasSigningProps) {
                signingConfig signingConfigs.twidere
            }

            multiDexEnabled true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("bool", "debug", "false")
        }
    }

    sourceSets.each {
        it.res.srcDirs += project.files("src/${it.name}/res-localized")
        it.java.srcDirs += "src/${it.name}/kotlin"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    aaptOptions {
        additionalParameters "--no-version-vectors"
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        lintConfig rootProject.file('lint.xml')
    }

    packagingOptions {
        exclude 'META-INF/*'
        exclude 'kotlin/**.kotlin_builtins'
        exclude 'org/osmdroid/**.png'
        exclude 'javax/annotation/**.java'
        exclude 'generated-sources/**'
        exclude 'jsr305_annotations/**'
        exclude 'error_prone/**'
        exclude 'third_party/java_src/**'
        exclude 'sdk-version.txt'
        exclude 'build-data.properties'
    }

}

dependencies {
    implementation project(':twidere.component.common')
    implementation project(':twidere.component.nyan')

/** Kotlin **/
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${libVersions['Kotlin']}"
    implementation "nl.komponents.kovenant:kovenant:${libVersions['Kovenant']}"
    implementation "nl.komponents.kovenant:kovenant-android:${libVersions['Kovenant']}"
    implementation "nl.komponents.kovenant:kovenant-combine:${libVersions['Kovenant']}"
    implementation "nl.komponents.kovenant:kovenant-functional:${libVersions['Kovenant']}"


/** Android support **/
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.browser:browser:1.2.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.core:core:1.2.0'
    implementation 'androidx.drawerlayout:drawerlayout:1.1.0-alpha01'
    implementation 'androidx.exifinterface:exifinterface:1.1.0'
    implementation 'androidx.legacy:legacy-support-core-ui:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'


/** Third-party dependencies **/
    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation "com.twitter:twitter-text:${libVersions['TwitterText']}"
    implementation 'com.davemorrissey.labs:subsampling-scale-image-view:3.6.0'
    implementation 'com.squareup:otto:1.3.8'
    implementation 'dnsjava:dnsjava:2.1.8'
    implementation 'com.commonsware.cwac:layouts:0.4.3'
    implementation 'com.rengwuxian.materialedittext:library:2.1.4'
    implementation 'com.pnikosis:materialish-progress:1.7'
    implementation 'com.github.uucky:ColorPicker-Android:0.9.7@aar'
    implementation "pl.droidsonroids.gif:android-gif-drawable:${libVersions['AndroidGIFDrawable']}"
    implementation 'com.sprylab.android.texturevideoview:texturevideoview:1.2.1'
    implementation 'com.squareup:pollexor:2.0.4'
    implementation "org.apache.james:apache-mime4j-core:${libVersions['Mime4J']}"
    implementation "org.apache.james:apache-mime4j-storage:${libVersions['Mime4J']}"
    implementation "com.bluelinelabs:logansquare:${libVersions['LoganSquare']}"
    kapt "com.bluelinelabs:logansquare-compiler:${libVersions['LoganSquare']}"
    implementation "com.fasterxml.jackson.core:jackson-core:2.7.4"
    implementation "com.hannesdorfmann.parcelableplease:annotation:${libVersions['ParcelablePlease']}"
    kapt "com.hannesdorfmann.parcelableplease:processor:${libVersions['ParcelablePlease']}"
    implementation "com.squareup.okhttp3:okhttp:${libVersions['OkHttp']}"
    implementation "com.squareup.okio:okio:2.4.3"
    implementation 'com.lnikkila:extendedtouchview:0.1.1'
    implementation "com.google.dagger:dagger:${libVersions['Dagger']}"
    kapt "com.google.dagger:dagger-compiler:${libVersions['Dagger']}"
    implementation 'org.attoparser:attoparser:2.0.4.RELEASE'
    implementation 'com.getkeepsafe.taptargetview:taptargetview:1.9.1'
    implementation 'net.ypresto.androidtranscoder:android-transcoder:0.2.0'
    implementation "com.google.android.exoplayer:exoplayer:${libVersions['Exoplayer']}"
    implementation "com.google.android.exoplayer:extension-okhttp:${libVersions['Exoplayer']}"
    implementation "com.github.bumptech.glide:glide:${libVersions['Glide']}"
    implementation "com.github.bumptech.glide:okhttp3-integration:${libVersions['GlideOkHttp3']}@aar"
    kapt "com.github.bumptech.glide:compiler:${libVersions['Glide']}"
    implementation "jp.wasabeef:glide-transformations:${libVersions['GlideTransformations']}"
    implementation "com.theartofdev.edmodo:android-image-cropper:${libVersions['AndroidImageCropper']}"


/** Custom dependencies **/
    implementation 'com.github.mariotaku:MessageBubbleView:1.6'
    implementation 'com.github.mariotaku:DragSortListView:0.6.1'
    implementation "com.github.mariotaku.MediaViewerLibrary:base:${libVersions['MediaViewerLibrary']}"
    implementation "com.github.mariotaku.MediaViewerLibrary:subsample-image-view:${libVersions['MediaViewerLibrary']}"
    implementation "com.github.mariotaku:SQLiteQB:${libVersions['SQLiteQB']}"
    implementation "com.github.mariotaku.ObjectCursor:core:${libVersions['ObjectCursor']}"
    kapt "com.github.mariotaku.ObjectCursor:processor:${libVersions['ObjectCursor']}"
    implementation "com.github.mariotaku.ExportablePreferences:core:${libVersions['ExportablePreferences']}"
    implementation "com.github.mariotaku:AbstractTask:${libVersions['AbstractTask']}"
    implementation "com.github.mariotaku.CommonsLibrary:parcel:${libVersions['MariotakuCommons']}"
    implementation "com.github.mariotaku.CommonsLibrary:io:${libVersions['MariotakuCommons']}"
    implementation "com.github.mariotaku.CommonsLibrary:text:${libVersions['MariotakuCommons']}"
    implementation "com.github.mariotaku.CommonsLibrary:text-kotlin:${libVersions['MariotakuCommons']}"
    implementation("com.github.mariotaku.CommonsLibrary:emojione-android:${libVersions['MariotakuCommons']}") {
        exclude group: 'org.apache.commons', module: 'commons-text'
    }
    implementation "com.github.mariotaku.CommonsLibrary:objectcursor:${libVersions['MariotakuCommons']}"
    implementation "com.github.mariotaku.CommonsLibrary:logansquare:${libVersions['MariotakuCommons']}"
    implementation "com.github.mariotaku:KPreferences:${libVersions['KPreferences']}"
    implementation "com.github.mariotaku.UniqR:android:${libVersions['UniqR']}"
    implementation "com.github.mariotaku:PickNCrop:${libVersions['PickNCrop']}"
    implementation "com.github.mariotaku.RestFu:library:${libVersions['RestFu']}"
    implementation "com.github.mariotaku.RestFu:oauth:${libVersions['RestFu']}"
    implementation "com.github.mariotaku.RestFu:oauth2:${libVersions['RestFu']}"
    implementation "com.github.mariotaku.RestFu:okhttp3:${libVersions['RestFu']}"
    implementation "com.github.mariotaku.RestFu:logansquare:${libVersions['RestFu']}"
    implementation "com.github.Tlaster:Chameleon:${libVersions['Chameleon']}"


/** Flavor dependencies **/
    fdroidImplementation "org.osmdroid:osmdroid-android:${libVersions['OSMDroid']}"
    fdroidImplementation "ch.acra:acra:${libVersions['ACRA']}"

    if (enableGoogleVariant) {
        // START Non-FOSS component
        googleImplementation "com.google.android.gms:play-services-ads:${libVersions['PlayServices']}"
        googleImplementation "com.google.android.gms:play-services-auth:${libVersions['PlayServices']}"
        googleImplementation "com.google.android.gms:play-services-maps:${libVersions['PlayServices']}"
        googleImplementation "com.google.maps.android:android-maps-utils:${libVersions['MapsUtils']}"
        googleImplementation "com.anjlab.android.iab.v3:library:${libVersions['IABv3']}"
        googleImplementation "com.dropbox.core:dropbox-core-sdk:${libVersions['DropboxCoreSdk']}"
        googleImplementation("com.google.apis:google-api-services-drive:${libVersions['GoogleDriveApi']}") {
            exclude group: 'org.apache.httpcomponents'
        }
        implementation 'com.google.guava:guava:28.2-android'
        // END Non-FOSS component
    }

    debugImplementation "com.facebook.stetho:stetho:${libVersions['Stetho']}"
    debugImplementation "com.facebook.stetho:stetho-okhttp3:${libVersions['Stetho']}"
    debugImplementation "com.github.mariotaku:StethoBeanShellREPL:${libVersions['StethoBeanShellREPL']}"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${libVersions['LeakCanary']}"
    debugImplementation('com.jayway.jsonpath:json-path:2.2.0') {
        exclude group: 'net.minidev', module: 'json-smart'
    }
    // Stetho dependency, see https://g.co/androidstudio/app-test-app-conflict
    debugImplementation 'com.google.code.findbugs:jsr305:3.0.2'


/** Testing **/
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    // https://g.co/androidstudio/app-test-app-conflict
    androidTestImplementation 'com.google.code.findbugs:jsr305:3.0.2'
}

if (enableGoogleVariant) {
// START Non-FOSS component
    apply plugin: 'com.google.gms.google-services'
// END Non-FOSS component
}